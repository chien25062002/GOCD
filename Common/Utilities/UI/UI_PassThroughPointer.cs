using UnityEngine;
using UnityEngine.EventSystems;
using System.Collections.Generic;

namespace Game
{
    public class UI_PassThroughPointer : MonoBehaviour, IPointerDownHandler, IPointerUpHandler
    {
        GameObject _lastPressedObject;

        public void OnPointerDown(PointerEventData eventData)
        {
            _lastPressedObject = PassThrough(eventData, ExecuteEvents.pointerDownHandler);
        }

        public void OnPointerUp(PointerEventData eventData)
        {
            GameObject upTarget = PassThrough(eventData, ExecuteEvents.pointerUpHandler);

            if (_lastPressedObject != null && _lastPressedObject == upTarget)
            {
                // G·ª≠i s·ª± ki·ªán OnPointerClick t·ªõi ƒë√∫ng object ƒë√£ nh·∫•n v√† th·∫£
                ExecuteEvents.Execute(_lastPressedObject, eventData, ExecuteEvents.pointerClickHandler);
            }

            _lastPressedObject = null;
        }

        /// <summary>
        /// G·ª≠i s·ª± ki·ªán xu·ªëng object UI b√™n d∆∞·ªõi n·∫øu kh√¥ng ph·∫£i ch√≠nh m√¨nh, v√† tr·∫£ v·ªÅ object ƒë∆∞·ª£c target
        /// </summary>
        GameObject PassThrough<T>(PointerEventData eventData, ExecuteEvents.EventFunction<T> handler)
            where T : IEventSystemHandler
        {
            List<RaycastResult> results = new List<RaycastResult>();
            EventSystem.current.RaycastAll(eventData, results);

            foreach (var result in results)
            {
                // üí• Tr√°nh raycast ch√≠nh object hi·ªán t·∫°i HO·∫∂C object n·∫±m trong c√πng c√¢y v·ªõi n√≥
                if (result.gameObject == gameObject || result.gameObject.transform.IsChildOf(transform))
                    continue;

                // N·∫øu l√† pointerDown th√¨ g√°n pointerPress
                if (typeof(T) == typeof(IPointerDownHandler))
                {
                    eventData.pointerPress = result.gameObject;
                    eventData.rawPointerPress = result.gameObject;
                    eventData.pointerPressRaycast = result;

                    eventData.eligibleForClick = true;
                    eventData.delta = Vector2.zero;
                    eventData.dragging = false;
                    eventData.useDragThreshold = true;
                    eventData.clickCount = 1;
                    eventData.clickTime = Time.unscaledTime;
                }

                // G·ª≠i s·ª± ki·ªán
                ExecuteEvents.Execute(result.gameObject, eventData, handler);
                return result.gameObject;
            }

            return null;
        }
    }
}
